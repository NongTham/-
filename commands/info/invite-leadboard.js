const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const fs = require("fs");
const path = require("path");

const filePath = path.join(__dirname, "../../database/invitedUsers.json");

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
function loadInvitedUsers() {
    if (fs.existsSync(filePath)) {
        const data = fs.readFileSync(filePath);
        return new Map(JSON.parse(data)); // ‡πÅ‡∏õ‡∏•‡∏á Array ‡∏à‡∏≤‡∏Å JSON ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Map
    } else {
        return new Map(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Map ‡∏ß‡πà‡∏≤‡∏á
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName("invite-leadboard")
        .setDescription("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å"),
    async execute(interaction, client) {
        // ‡πÇ‡∏´‡∏•‡∏î invitedUsersMap ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        let invitedUsersMap = loadInvitedUsers(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON

        async function total() {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏ç
            let inviteCounts = new Map();

            // ‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô invitedUsersMap ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏ç‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç
            invitedUsersMap.forEach((value, key) => {
                const inviterId = value.inviter;
                const count = value.count;

                if (inviteCounts.has(inviterId)) {
                    inviteCounts.set(inviterId, inviteCounts.get(inviterId) + count);
                } else {
                    inviteCounts.set(inviterId, count);
                }
            });

            // ‡πÅ‡∏õ‡∏•‡∏á inviteCounts ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á objects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö leaderboard
            let userInvs = [];
            inviteCounts.forEach((count, inviterId) => {
                userInvs.push({ user: inviterId, invites: count });
            });

            return userInvs;
        }

        async function sendMessage(message) {
            const embed = new EmbedBuilder()
                .setColor("Green")
                .setDescription(message);

            await interaction.reply({ embeds: [embed] });
        }

        var leaderboard = await total();
        leaderboard.sort((a, b) => b.invites - a.invites);
        var output = leaderboard.slice(0, 10);

        var string = "";
        var num = 1;
        for (const value of output) {
            var member = await interaction.guild.members.fetch(value.user);
            string += `${num}. <@${member.user.id}> - ${value.invites} ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç\n`;
            num++;
        }

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        string = string || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç";
        await sendMessage(
            `üåè **‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô)**\n\n${string}`
        );
    },
};
